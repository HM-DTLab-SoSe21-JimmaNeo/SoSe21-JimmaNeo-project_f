@page "/testoverview"
@inject Services.TestsDefinitionBackendAccessService TestDefinitionService
@inject NavigationManager NavigationManager
@inject UserServicee UserService

@*<head>
    <link href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'>
    </head>*@


<div class="container">
    <form>
        <h2 class="text-center">Tests</h2>
        <hr class="divider" b-6rl0707n1o="" style="color: black">
        @if (UserService.User != null && UserService.User.Role == Role.Teacher)
        {
            <div class="text-center">
                <button class="btn btn-outline-success btn-sm" @onclick="AddTest">Add Test</button>
            </div>
        }
        <div class="row">
            <div class="col-md-6">
                <EditForm Model="@searchValue">

                    <div class="searchcostum input-group pt-2" style="margin-bottom: 5px">

                        @if (isFiltered == false)
                        {
                            <div class="text-left">
                                <InputText type="search" class="form-control rounded" placeholder="Search by name"
                                aria-label="Name of the Content" aria-describedby="search-addon"
                                @bind-Value="@searchValue" />
                            </div>
                            <button class="btn btn-outline-primary btn-sm" @onclick="SearchContent">Search</button>
                        }
                        else
                        {
                            <div class="text-left">
                                <button class="btn btn-outline-primary" @onclick="ResetSearchContent">Return</button>
                            </div>
                        }
                    </div>

                </EditForm>

            </div>

        </div>
        <hr class="divider">

        @if (Tests != null)
        {
            <ul class="list-group list-group-flush" style="text-align: center">

                @foreach (var content in Tests)
                {
                    <div class="row" style="text-align: left">
                        <div class="col-md-6" style="font-size:17px">
                            @(content.DateOfCreation.ToShortDateString()) <b>@(content.Topic)</b>
                        </div>
                        <div class="btn- col-md-6 text-right" style="align-content: right">
                            @if (UserService.User != null && UserService.User.Role == Role.Teacher)
                            {
                                <button class="btn btn-outline-dark btn-sm"
                        @onclick="() => EditQuiz((TestDTO)content)">Edit</button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteTest(content)">Delete</button>
                            }
                            <button class="btn btn-outline-success btn-sm"
                        @onclick="() => StartTest(content.TestID)">Start</button>
                            <button class="btn btn-outline-primary btn-sm"
                        @onclick="() => GetFurtherTopicInformations(content.TestID)">Topic</button>
                        </div>
                    </div>

                }
            </ul>
        }
        else
        {
            <h5 class="text-center">Loading ... or no content found.</h5>
        }
    </form>
</div>


@*<div class="container">
    <form>
    <h2 class="text-center">Your Content</h2>
    <div class="col text-center">
    <div class="px-5">
    <EditForm Model="@searchValue">
    <div class="searchcostum input-group pt-2">

    @if (isFiltered == false)
    {
    <div class="px-auto">
    <InputText type="search" class="form-control rounded" placeholder="Search by name"
    aria-label="Name of the Content" aria-describedby="search-addon"
    @bind-Value="@searchValue" />
    </div>
    <button class="btn btn-outline-primary btn-sm" @onclick="SearchContent">Search</button>
    }
    else
    {
    <div class="text-center pb-2">
    <button class="btn btn-outline-primary" @onclick="ResetSearchContent">Return</button>
    </div>
    }

    </div>
    </EditForm>

    <div class="text-center py-2">
    <button class="btn btn-outline-success" @onclick="AddTest">Add</button>
    </div>
    </div </div>

    @if (Tests != null)

    {
    <ul class="list-group list-group-flush">

    @foreach (var content in Tests)
    {
    <li class="text-center list-group-item">
    @(content.DateOfCreation.ToShortDateString()) <b>@(content.Topic)</b> <button
    class="btn btn-outline-dark btn-sm" @onclick="() => EditQuiz((TestDTO)content)">Edit</button>
    <button class="btn btn-outline-danger btn-sm"
    @onclick="() => DeleteTest(content)">Delete</button>
    <button class="btn btn-outline-dark btn-sm"
    @onclick="() => StartTest(content.TestID)">Start</button>
    <button class="btn btn-outline-info btn-sm"
    @onclick="() => GetFurtherTopicInformations(content.TestID)">About
    Topic</button>
    </li>
    }
    </ul>
    }
    else
    {
    <h5 class="text-center">Loading ... or no content found.</h5>
    }
    </form>
    </div>*@


@code {
    public string searchValue = "";

    public bool isFiltered { get; set; }

    public List<TestDTO> Tests { get; set; }

    private List<TestDTO> copyOfTest { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Tests = await TestDefinitionService.GetTestOverview();
    }

    private void EditQuiz(TestDTO test)
    {
        NavigationManager.NavigateTo("/testedit/" + test.TestID);
    }

    private void AddTest()
    {
        NavigationManager.NavigateTo("/testedit/0");
    }

    private async Task DeleteTest(TestDTO test)
    {
        await TestDefinitionService.DeleteTest(test.TestID);
        Tests.Remove(test);
        if (copyOfTest != null)
        {
            copyOfTest.Remove(test);
        }
    }


    private void SearchContent()
    {
        if (Tests != null && searchValue != null)
        {
            copyOfTest = new List<TestDTO>(Tests);
            isFiltered = true;
            Tests.Clear();
            Tests.AddRange(copyOfTest.Where(t => t.Topic.StartsWith(searchValue)));
        }
    }

    private void ResetSearchContent()
    {
        isFiltered = false;
        Tests.Clear();
        Tests.AddRange(copyOfTest);
    }

    private void StartTest(int contentId)
    {
        NavigationManager.NavigateTo("/runtest/" + contentId);
    }

    private void GetFurtherTopicInformations(int contentId)
    {
        NavigationManager.NavigateTo("/furtherinformation/" + contentId);
    }
}