@page "/testoverview"
@inject Services.TestsDefinitionBackendAccessService TestDefinitionService
@inject NavigationManager NavigationManager
@inject UserLoggedInService UserService

@if (UserService.User != null)
{
    <div class="container">
    <h2 class="text-center">Your Tests</h2>
    <hr class="divider">
    <div class="col text-center">

        <div class="px-5">
            <EditForm Model="@searchValue">
                <div class="searchcostum input-group pt-2">

                    @if (IsFiltered == false)
                        {
                            <div class="px-auto shadow">
                                <InputText type="search" class="form-control rounded" placeholder="Search by Topic"
                            aria-label="Name of the Content" aria-describedby="search-addon"
                            @bind-Value="@searchValue" />


                            </div>@*Search Icon*@
                            <button class="btn btn-outline-primary btn-sm shadow" @onclick="SearchTest">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-search" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007
                                      1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                                </svg>
                            </button>
                            <br />


                        }
                        else
                        {
                            <div class="text-center pb-2">
                                <button class="btn btn-outline-primary shadow" @onclick="ResetSearchTest">Return</button>
                            </div>
                            <br />

                        }

                    </div>
                </EditForm>
                @if (UserService.User.Role == Role.Teacher)
                {
                    <div class="text-center py-2">
                        <button class="btn btn-outline-dark btn-sm shadow" @onclick="AddTest">+ Add Test</button>
                    </div>
                }
            </div>
        </div>

        @if (Tests != null)

        {

            <ul class="list-group list-group-flush">

                @foreach (var content in Tests)
                {
                    <li class="text-center list-group-item">
                        <div class="card shadow">

                            <div class="card-body">
                                <b>
                                    TestID:
                                </b>
                                @(content.TestID)
                                <b>
                                    Date:
                                </b>
                                @(content.DateOfCreation.ToShortDateString())
                                <b>
                                    Author:
                                </b>
                                @(content.Author.FirstName)
                                @(content.Author.LastName)
                                <b>
                                    Topic:
                                </b>

                                @(content.Topic)
                                <br />
                                @if (UserService.User.Role == Role.Teacher)
                                {

                                    <button class="btn btn-outline-dark btn-sm" @onclick="() => EditQuiz((TestDTO)content)">
                                        Edit
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-pencil-square" viewBox="0 0 16 16">
                                            <path
                                d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                            <path fill-rule="evenodd"
                                d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                        </svg>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ModalShow(content)">
                                        Delete
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-x-lg" viewBox="0 0 16 16">
                                            <path
                                d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414
                                              1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
                                        </svg>
                                    </button>
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => StartTest(content.TestID)">
                                        Start
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-play-fill" viewBox="0 0 16 16">
                                            <path
                                d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
                                        </svg>
                                    </button>
                                    <button class="btn btn-outline-primary btn-sm"
                        @onclick="() => GetFurtherTopicInformations(content.TestID)">
                        @content.Topic
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-lightbulb" viewBox="0 0 16 16">
                            <path
                                d="M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13a.5.5 0 0 1 0 1 .5.5 0 0 1 0 1l-.224.447a1
                                              1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1 0-1 .5.5 0 0 1 0-1 .5.5 0 0 1-.46-.302l-.761-1.77a1.964 1.964 0 0 0-.453-.618A5.984
                                              5.984 0 0 1 2 6zm6-5a5 5 0 0 0-3.479 8.592c.263.254.514.564.676.941L5.83 12h4.342l.632-1.467c.162-.377.413-.687.676-.941A5 5 0 0 0 8 1z" />
                        </svg>
                    </button>
                                }
                                else if (UserService.User.Role == Role.Student)
                                {
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => StartTest(content.TestID)">
                                        Start
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-play-fill" viewBox="0 0 16 16">
                                            <path
                                d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
                                        </svg>
                                    </button>
                                    <button class="btn btn-outline-primary btn-sm"
                        @onclick="() => GetFurtherTopicInformations(content.TestID)">@content.Topic
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-lightbulb" viewBox="0 0 16 16">
                            <path d="M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13a.5.5 0 0 1 0 1 .5.5 0 0 1 0 1l-.224.447a1
                                              1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1 0-1 .5.5 0 0 1 0-1 .5.5 0 0 1-.46-.302l-.761-1.77a1.964 1.964 0
                                              0 0-.453-.618A5.984 5.984 0 0 1 2 6zm6-5a5 5 0 0 0-3.479 8.592c.263.254.514.564.676.941L5.83 12h4.342l.632-1.467c.162-.377.413-.687.676-.941A5
                                              5 0 0 0 8 1z" />
                        </svg>
                    </button>
                                }
                            </div>
                        </div>
                    </li>
                }
            </ul>
            @if (showModal)
            {
                <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
                    <div class="modal-dialog shadow">
                        <div class="modal-content">

                            <!-- Modal Header -->
                <div class="modal-header">
                                <h4 class="modal-title">Confirm delete</h4>
                                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                            </div>

                            <!-- Modal body -->
                <div class="modal-body">
                                <p>Are you sure you want to delete @CurrentTest.Topic?</p>
                            </div>

                            <!-- Modal footer -->
                <div class="modal-footer">
                                <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                                <button type="button" class="btn btn-danger"
                        @onclick="() => DeleteTest(CurrentTest)">Delete</button>
                            </div>

                        </div>
                    </div>
                </div>

            }

        }
        else
        {
            <h5 class="text-center">Loading ... or no content found.</h5>
        }
    </div>
}
else
{
    <h5 class="text-center">Please login to use this page.</h5>
}

@code {
    private string searchValue = "";

    private bool IsFiltered { get; set; }

    public List<TestDTO> Tests { get; set; }

    /*copy of all available tests to reset the view after the search function is used*/
    private List<TestDTO> CopyOfTest { get; set; }

    private TestDTO CurrentTest { get; set; }

    private bool showModal = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Tests = await TestDefinitionService.GetTestOverview();
    }

    private void EditQuiz(TestDTO test)
    {
        NavigationManager.NavigateTo("/testedit/" + test.TestID);
    }

    private void AddTest()
    {
        NavigationManager.NavigateTo("/testedit/0");
    }

    private async Task DeleteTest(TestDTO test)
    {

        Tests.Remove(test);
        if (CopyOfTest != null)
        {
            CopyOfTest.Remove(test);
        }
        await TestDefinitionService.DeleteTest(test.TestID);

        showModal = false;
        StateHasChanged();
        await Task.Delay(3000);
    }


    private void SearchTest()
    {
        if (Tests != null && searchValue != null)
        {
            CopyOfTest = new List<TestDTO>(Tests);
            IsFiltered = true;
            Tests.Clear();
            Tests.AddRange(CopyOfTest.Where(t => t.Topic.ToLower().StartsWith(searchValue.ToLower())));
        }
    }

    private void ResetSearchTest()
    {
        IsFiltered = false;
        Tests.Clear();
        Tests.AddRange(CopyOfTest);
    }

    private void StartTest(int contentId)
    {
        NavigationManager.NavigateTo("/runtest/" + contentId);
    }

    private void GetFurtherTopicInformations(int contentId)
    {
        NavigationManager.NavigateTo("/furtherinformation/" + contentId);
    }

    void ModalShow(TestDTO test)
    {
        showModal = true;
        CurrentTest = test;
    }

    void ModalCancel() => showModal = false;
}
