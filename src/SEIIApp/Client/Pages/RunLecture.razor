@page "/runlecture/{LectureID:int}"

@inject Services.LectureBackendAccessService LectureService
@inject NavigationManager NavigationManager


<div class="container">

    @if (LectureDto != null)
    {
        VideoComponent.OnEditing = false;
        PictureComponent.OnEditing = false;
        <h2 class="text-center">@(LectureDto.Topic)</h2>
        <hr class="divider" />
        <ul class="list-group list-group-flush">

            

            <EditForm Model="@LectureDto">
                @if (LectureDto.Test != null)
                {
                    <div class="text-center">
                        <button class="btn btn-outline-primary btn-lg shadow" type="button" @onclick="()=> GetToTest()">Start Test</button>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <button class="btn btn-outline-primary btn-lg shadow" type="button" disabled>Start Test</button>
                    </div>
                }

                @if (LectureDto.Videos.Any())
                {
                    <br />
                    <h3 class="text-center"><b>Videos</b></h3>
                    @foreach (var video in LectureDto.Videos)
                    {
                        <div class="card shadow">
                            <div class="card-body">
                                <VideoComponent VideoContentDTO="video"></VideoComponent>
                            </div>
                        </div>
                        <br />
                    }
                }


                @if (LectureDto.Content.Any())
                {
                    <br />
                    <h3 class="text-center"><b>Pictures</b></h3>
                    @foreach (var picture in LectureDto.Content)
                    {
                        <div class="card shadow">
                            <div class="card-body">
                        <li class="text-center list-group-item">
                            <PictureComponent PictureContentDTO="picture"></PictureComponent>
                        </li>
                        <br />
                    </div>
               </div>
                        }
        } 
<li class="list-group list-group-flush">
    <br />
    @if (!String.IsNullOrEmpty(LectureDto.Text))
    {
        <h3 class="text-center"> <b>Lecture Text</b></h3>
        <div class="card shadow">
            <div class="card-body">

                <br />
                <p class="text-center">@LectureDto.Text</p>
            </div>
        </div>
        <br />
    }
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <div class="w-100">
                <button class="btn btn-outline-primary shadow" type="button" @onclick="()=> GetLastLecture()">Back</button>


                @if (hasNext)
                {                  
                    <button class="btn float-right btn-outline-primary shadow" type="button" @onclick="()=> GetNextLecture()">Next</button>
                }
                else
                {
                    <button class="btn float-right btn-outline-primary shadow" type="button" disabled>Next</button>

                }
            </div><br /><br />
        </div>
    </li>

        </EditForm>
</ul>
    }



</div>


@code {

    [Parameter]
    public int LectureID { get; set; }

    public static LectureDTO LectureDto { get; set; }

    public List<LectureDTO> Lectures { get; set; }

    private bool isClicked { get; set; }

    private bool hasNext { get; set; } = true;


    protected override async Task OnParametersSetAsync()
    {

        var returnedLecture = await LectureService.GetLectureById(LectureID);
        await base.OnParametersSetAsync();
        LectureDto = returnedLecture;
        Lectures = await LectureService.GetLectureOverview();
        SEIIApp.Client.Components.VideoComponent.OnEditing = false;
    }

    private async void OnSubmitLecture()
    {

        var answer = await LectureService.AddOrUpdateLecture(LectureDto);
        if (answer != null)
        {
            NavigationManager.NavigateTo("/resultslecture/");
        }

    }

    private void GetNextLecture()
    {
        int nextID = LectureID + 1;
        if(nextID <= Lectures.Count) {
            NavigationManager.NavigateTo($"/runlecture/{nextID}");
            if((nextID + 1) > Lectures.Count)
                {
                hasNext = false;
                }
        }
        else
        {
            hasNext = false;
        }
    }

  
    private void GetLastLecture()
    {
        hasNext = true;
        if(LectureID>=2)
            NavigationManager.NavigateTo($"/runlecture/{LectureID -1}");
    }

    private void GetToTest()
    {
        NavigationManager.NavigateTo($"/runtest/{LectureDto.Test.TestID}");
    }
}

