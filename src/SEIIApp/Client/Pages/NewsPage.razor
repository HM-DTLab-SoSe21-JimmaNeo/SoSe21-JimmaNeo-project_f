@page "/news"
@inject UserServicee UserService
@inject NewsBackendAccessService NewsService
    <html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=yes" />

    </head>

    <body>
        <h3>News</h3>

        @if (UserService.User != null && UserService.User.Role == Role.Admin)
        {
            <div>
                <h4>Add a News</h4>
                <label>Topic</label>
                <input @bind="Topic" />
                <label>Content</label>
                <input @bind="Content" />
                <button class="btn btn-success" @onclick="AddNews">Add</button>
                <label>@Message</label>
            </div>

        }

        @if (News != null)
        {
            @foreach (var news in News)
            {
                @*  <div class="solid">
                    <label>@news.Topic</label> <label>From @news.DateOfCreation.ToString("yyyy'-'MM'-'dd")</label>
                    <p>@news.Content</p>
                    @if (UserService.User != null && UserService.User.Role == Role.Admin)
                    {
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteContent(news)">Delete</button>
                    }

                </div>
                *@
                <div class="blog-card" style="width: 100%">
                    <div class="meta" style="width: 100%">
                        <div class="photo" style= "width: 100%; background-image: url('images/coffee2.jpg')"></div>
                        <ul class="details">
                            <li> <span class="oi oi-person" aria-hidden="true"></span><a href="#"></a> System</li>
                            <li><span class="oi oi-calendar" aria-hidden="true"></span> @news.DateOfCreation.ToString("yyyy'-'MM'-'dd")</li>
                            <li>
                                <ul>
                                    <span class="oi oi-tags" aria-hidden="true"></span>
                                  
                                    <li>@news.Tags</li>
                                    
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div class="description">
                        <h1>@news.Topic</h1>
                        <h2>Opening a door to the future</h2>
                        <p>
                            @news.Content
                        </p>
                    </div>
                </div>
  

            }
        }

    </body>
</html>


@code {

    [Parameter]
    public List<NewsDTO> News { get; set; }

    private string Topic { get; set; }

    private string Content { get; set; }

    private string Message { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        News = await NewsService.GetNews();
        News.Reverse();
    }

    private async Task AddNews()
    {
        NewsDTO NewNews = new NewsDTO() { Topic = Topic, Content = Content, DateOfCreation = DateTime.Now };
        NewNews = await NewsService.AddOrUpdateNews(NewNews);

        if (NewNews != null)
        {
            News.Insert(0, NewNews);
            Message = "Successfully added new News.";

            Topic = "";
            Content = "";
        }
        else
        {
            Message = "Couldn't add new News";
        }

    }

    private async void DeleteContent(NewsDTO news)
    {
        bool deleted = await NewsService.DeleteNews(news.NewsID);
        if (deleted)
        {
            News.Remove(news);
        }
    }




}

