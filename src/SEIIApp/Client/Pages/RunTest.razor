@page "/runtest/{TestID:int}"

@inject Services.TestsDefinitionBackendAccessService TestService
@inject Services.CompletedTestBackendAccessService CompletedTestService
@inject NavigationManager NavigationManager
@inject UserLoggedInService UserService


<div class="container">

    @if (TestDto != null && TestDto.Questions.Any() && TestDto.Questions.Count != 0)
    {
        <h2 class="text-center">@(TestDto.Topic)</h2>
        <hr class="divider">
        <div class="card shadow">
            <div class="card-body">
                <h6 class="text-center">@(TestDto.Description)</h6>
            </div>
        </div>

        <EditForm Model="@TestDto">

            <ul class="list-group list-group-flush">
                @foreach (var video in TestDto.Videos)
                {
                    <li class="text-center list-group-item">
                        <div class="card shadow">
                            <div class="card-body">
                                <VideoComponent VideoContentDTO="video"></VideoComponent>
                            </div>
                        </div>
                    </li>

                }

                @foreach (var question in TestDto.Questions)
                {
                    if (!String.IsNullOrEmpty(question.QuestionText))
                    {
                        <hr />
                        <div class="card shadow">
                            <div class="card-body">
                        <li class="text-center list-group-item">
                            <br />
                            <h3> @(question.QuestionText) </h3>
                        </li>
                        @if (question.Pictures.Any())
                        {
                            foreach (var picture in question.Pictures)
                            {
                                <li class="text-center list-group-item">
                                    <PictureComponent PictureContentDTO="picture"></PictureComponent>
                                </li>
                            }
                        }
                        @if (question.Answers.Any())
                        {
                            foreach (var answer in question.Answers)
                            {
                                if (!String.IsNullOrEmpty(answer.AnswerText))
                                {
                                    <li class="text-center list-group-item">
                                        <label>@(answer.AnswerText)</label>
                                        <InputCheckbox @bind-Value="answer.IsClicked"></InputCheckbox>
                                    </li>

                                }

                            }
                        }
            </div>
                </div>
            }

        }
                        <br />
                        <button class="btn btn-outline-success btn-sm shadow" @onclick="()=> OnSubmitTest()">Submit</button>
                        </ul>
                        </EditForm>

                        }
                        else
                        {

                        }


                    </div>

@code {

    [Parameter]
    public int TestID { get; set; }

    public static TestDTO TestDto { get; set; }

    public static CompletedTestDTO CompletedTestDTO { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        var returnedTest = await TestService.GetTestById(TestID);
        await base.OnParametersSetAsync();
        TestDto = returnedTest;
        SEIIApp.Client.Components.VideoComponent.OnEditing = false;
        SEIIApp.Client.Components.PictureComponent.OnEditing = false;
    }

    private async void OnSubmitTest()
    {
        CompletedTestDTO completedTest = CreateCompletedTest(TestDto);
        CompletedTestDTO = completedTest;
        CompletedTestService.AddCompletedTest(completedTest);

        var answer = await TestService.AddOrUpdateTest(TestDto);
        if (answer != null)
        {
            NavigationManager.NavigateTo("/resultstest/");
        }

    }

    private int CountMaxPoints(List<QuestionDTO> questions)
    {
        int maxPoints = 0;
        foreach (var question in questions)
        {
            foreach (var answer in question.Answers)
            {
                if (answer.IsCorrect)
                {
                    maxPoints++;
                }
            }
        }
        return maxPoints;
    }

    private int CountReachedPoints(List<QuestionDTO> questions)
    {
        int reachedPoints = 0;
        foreach (var question in questions)
        {
            foreach (var answer in question.Answers)
            {
                if (answer.IsClicked)
                {
                    if (answer.IsCorrect)
                    {
                        reachedPoints++;
                    }
                    else if (!answer.IsCorrect && reachedPoints > 0)
                    {
                        reachedPoints--;
                    }
                }
                else if (answer.IsCorrect && !answer.IsClicked && reachedPoints > 0)
                {
                    reachedPoints--;
                }
            }
        }
        return reachedPoints;
    }

    private CompletedTestDTO CreateCompletedTest(TestDTO test)
    {
        CompletedTestDTO completedTest = new CompletedTestDTO();
        completedTest.SolvedTest = test;
        completedTest.MaxPoints = CountMaxPoints(TestDto.Questions);
        completedTest.ReachedPoints = CountReachedPoints(TestDto.Questions);
        completedTest.Student = UserService.User;

        return completedTest;
    }
}
