@page "/runtest/{TestID:int}"

@inject Services.TestsDefinitionBackendAccessService TestDefinitionService
@inject NavigationManager NavigationManager


<div class="container">

    @if (TestDto != null && TestDto.Questions.Any() && TestDto.Questions.Count != 0)
    {
        <h2 class="text-center">@(TestDto.Topic)</h2>

        <EditForm Model="@TestDto">

            <ul class="list-group list-group-flush">
                @foreach (var video in TestDto.Videos)
                {
                <li class="text-center list-group-item">
                    @*<label>@(video.Description)</label><br />
                    <iframe width="560" height="315" src="@video.Path" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>*@
                    <VideoComponent VideoContentDTO="video"></VideoComponent>
                </li>
                }

                @foreach (var question in TestDto.Questions)
                {
                    if (!String.IsNullOrEmpty(question.QuestionText))
                    {
                        <hr />
                        <li class="text-center list-group-item">
                            <br />
                            <h3> @(question.QuestionText) </h3>
                        </li>
                        if (question.Answers.Any())
                        {
                            foreach (var answer in question.Answers)
                            {
                                if (!String.IsNullOrEmpty(answer.AnswerText))
                                {
                                    <li class="text-center list-group-item">
                                        <label>@(answer.AnswerText)</label>
                                        <InputCheckbox @bind-Value="answer.IsClicked"></InputCheckbox>
                                    </li>

                                }

                            }
                        }
                    }

                }
                <button class="btn btn-light btn-sm my-3" @onclick="()=> OnSubmitTest()">Submit</button>
            </ul>
        </EditForm>

    }
    else
    {

    }


</div>

@code {

    [Parameter]
    public int TestID { get; set; }

    public static TestDTO TestDto { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        var returnedTest = await TestDefinitionService.GetTestById(TestID);
        await base.OnParametersSetAsync();
        TestDto = returnedTest;
        SEIIApp.Client.Components.VideoComponent.OnEditing = false;
    }

    private async void OnSubmitTest()
    {
        TestDto.MaxPoints = CountMaxPoints(TestDto.Questions);
        TestDto.ReachedPoints = CountReachedPoints(TestDto.Questions);

        var answer = await TestDefinitionService.AddOrUpdateTest(TestDto);
        if (answer != null)
        {
            NavigationManager.NavigateTo("/resultstest/");
        }

    }

    private int CountMaxPoints(List<QuestionDTO> questions)
    {
        int maxPoints = 0;
        foreach(var question in questions){
            foreach (var answer in question.Answers) {
                if (answer.IsCorrect)
                {
                    maxPoints++;
                }
            }
        }
        return maxPoints;
    }

    private int CountReachedPoints(List<QuestionDTO> questions)
    {
        int reachedPoints = 0;
        foreach (var question in questions)
        {
            foreach (var answer in question.Answers)
            {
                if (answer.IsClicked)
                {
                    if (answer.IsCorrect)
                    {
                        reachedPoints++;
                    }
                    else if(!answer.IsCorrect && reachedPoints > 0)
                    {
                        reachedPoints--;
                    }
                }else if(answer.IsCorrect && !answer.IsClicked && reachedPoints > 0)
                {
                    reachedPoints--;
                }
            }
        }
        return reachedPoints;
    }
}

