@page "/runtest/{TestID:int}"

@inject Services.TestsDefinitionBackendAccessService TestService
@inject Services.CompletedTestBackendAccessService CompletedTestService
@inject NavigationManager NavigationManager
@inject UserLoggedInService UserService
@inject EditService EditService

<div class="container">


    @if (UserService.User != null && TestDto != null && TestDto.Questions.Any() && TestDto.Questions.Count != 0)
    {
        <h2 class="text-center">@(TestDto.Topic)</h2>
        <hr class="divider">
        <div class="card shadow">
            <div class="card-body">
                <h6 class="text-center">@(TestDto.Description)</h6>
            </div>
        </div>

        <EditForm Model="@TestDto">

            <ul class="list-group list-group-flush">
                @foreach (var video in TestDto.Videos)
                {
                    <li class="text-center list-group-item">
                        <div class="card shadow">
                            <div class="card-body">
                                <VideoComponent VideoContentDTO="video"></VideoComponent>
                            </div>
                        </div>
                    </li>

                }

                @foreach (var question in TestDto.Questions)
                {
                    if (!String.IsNullOrEmpty(question.QuestionText))
                    {
                        <hr />
                        <div class="card shadow">
                            <div class="card-body">
                        <li class="text-center list-group-item">
                            <br />
                            <h3> @(question.QuestionText) </h3>
                        </li>
                        @if (question.Pictures.Any())
                        {
                            foreach (var picture in question.Pictures)
                            {
                                <li class="text-center list-group-item">
                                    <PictureComponent PictureContentDTO="picture"></PictureComponent>
                                </li>
                            }
                        }
                        @if (question.Answers.Any())
                        {
                            foreach (var answer in question.Answers)
                            {
                                if (!String.IsNullOrEmpty(answer.AnswerText))
                                {
                                    <li class="text-center list-group-item">
                                        <label>@(answer.AnswerText)</label>
                                        <InputCheckbox @bind-Value="answer.IsClicked"></InputCheckbox>
                                    </li>

                                }

                            }
                        }
            </div>
            </div>
        }

    }
                </ul>
                <br />
                <br />
                <div class="text-center">
                    <button class="btn btn-outline-success shadow" @onclick="()=> OnSubmitTest()">
                        Submit
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-lg" viewBox="0 0 16 16">
                            <path d="M13.485 1.431a1.473 1.473 0 0 1 2.104 2.062l-7.84 9.801a1.473 1.473 0 0 1-2.12.04L.431 8.138a1.473 1.473 0 0 1 2.084-2.083l4.111 4.112 6.82-8.69a.486.486 0 0 1 .04-.045z" />
                        </svg>
                        <br />
                    </button>

                    <button class="btn btn-outline-danger shadow" @onclick="() =>  NavigationManager.NavigateTo(testOverviewURL)">
                        Cancel
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                            <path d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414
                                              1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
                        </svg>
                    </button>
                    <br />
                </div>
                <br />
                <br />
                </EditForm>
            }
            else
            {
                <h5 class="text-center">Something went wrong...</h5>
            }
    </div>

    @code {

        [Parameter]
        public int TestID { get; set; }

        private TestDTO TestDto { get; set; }

        private CompletedTestDTO CompletedTestDTO { get; set; }

        private string testOverviewURL = "/testoverview";

        protected override async Task OnParametersSetAsync()
        {
            var returnedTest = await TestService.GetTestById(TestID);
            await base.OnParametersSetAsync();
            TestDto = returnedTest;
            EditService.OnEditing = false;
            SetIsClickedAnswerToFalse();
        }

        private async void OnSubmitTest()
        {
            CompletedTestDTO completedTest = CreateCompletedTest(TestDto);
            CompletedTestDTO = await CompletedTestService.AddCompletedTest(completedTest);
 
            var answer = await TestService.AddOrUpdateTest(TestDto);
            if (answer != null)
            {
                NavigationManager.NavigateTo("/resultstest/" + CompletedTestDTO.CtId);
            }

        }

        private int CountMaxPoints(List<QuestionDTO> questions)
        {
            int maxPoints = 0;
            foreach (var question in questions)
            {
                foreach (var answer in question.Answers)
                {
                    if (answer.IsCorrect)
                    {
                        maxPoints++;
                    }
                }
            }
            return maxPoints;
        }

        private int CountReachedPoints(List<QuestionDTO> questions)
        {
            int reachedPoints = 0;
            foreach (var question in questions)
            {
                foreach (var answer in question.Answers)
                {
                    if (answer.IsClicked)
                    {
                        if (answer.IsCorrect)
                        {
                            reachedPoints++;
                        }
                        else if (!answer.IsCorrect && reachedPoints > 0)
                        {
                            reachedPoints--;
                        }
                    }
                    else if (answer.IsCorrect && !answer.IsClicked && reachedPoints > 0)
                    {
                        reachedPoints--;
                    }
                }
            }
            return reachedPoints;
        }

        private CompletedTestDTO CreateCompletedTest(TestDTO test)
        {
            CompletedTestDTO completedTest = new CompletedTestDTO();
            completedTest.SolvedTest = test;
            completedTest.MaxPoints = CountMaxPoints(TestDto.Questions);
            completedTest.ReachedPoints = CountReachedPoints(TestDto.Questions);
            completedTest.Student = UserService.User;
            return completedTest;
        }

        private void SetIsClickedAnswerToFalse(){
         foreach(var question in TestDto.Questions){
           foreach(var answers in question.Answers){
               answers.IsClicked = false;
           }
          }
        }
    }
