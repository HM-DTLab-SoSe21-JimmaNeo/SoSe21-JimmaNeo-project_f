@page "/lectureedit/{LectureID:int}"

@inject UserServicee UserService

@inject Services.LectureBackendAccessService LectureService
@inject NavigationManager NavigationManager
@inject Services.TestsDefinitionBackendAccessService TestService


<h3>LectureEditPage</h3>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-7 text-center">
            <h4 class="text-center">Content Editor</h4>
            <p></p>
            <p></p>
            <p></p>
            
            @if (LectureDto != null)
            {
                
               // if (UserService.User == null) Console.WriteLine("User ist null"); // wenn student angemeldet ist wird er null
                if (UserService.User != null && UserService.User.Role == Role.Teacher)
                {
                    VideoComponent.OnEditing = true;
                    PictureComponent.OnEditing = true;
        <EditForm EditContext="@context" OnSubmit="OnSubmit">
            <ObjectGraphDataAnnotationsValidator />



            <label>Lecture Name:</label><br />
            <InputText @bind-Value="LectureDto.Topic" /><br />


            @foreach (var video in LectureDto.Videos)
            {
                <div class="card">
                    <div class="card-body">

                        <VideoComponent VideoContentDTO="video"></VideoComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeleteVideoContent(video)">Remove Video</button>
                    </div>
                </div><br />
            }
            <button class="btn btn-light" @onclick="AddVideoContent">Add Video</button>

            <hr />


            @foreach (var picture in LectureDto.Content)
            {
                <div class="card">
                    <div class="card-body">
                        <PictureComponent PictureContentDTO="picture"></PictureComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeletePictureContent(picture)">Remove Picture</button>
                    </div>
                </div><br />

            }
            <button class="btn btn-light" @onclick="AddPictureContent">Add Picture</button><br />
            <hr />




            <label>Test ID:</label><br />
            <InputText @bind-Value="TestTopic" />

            <button class="btn btn-light btn-sm my-3" @onclick="AddTestToLecture">Add Test</button><br />
            <hr />

            <label>Lecture Text:</label><br />

            <br />

            <div class="form-floating">
                <textarea class="form-control" id="inputMessage" type="text" placeholder="Enter Text for lecture here..." style="height: 15rem" @bind="LectureDto.Text"></textarea>
            </div><br />
            <hr />



            <button class="btn btn-light" @onclick="() => SaveContentToBackend(this.LectureDto)">Save Lecture</button>
            <p></p>
            <ValidationSummary />
        </EditForm>
                }
                else
                {
                    <label>No access to this page!</label>
                }

            }
            else
            {
                <h5>Lectures in loading (or not found) ...</h5>
            }

        </div>
    </div>
</div>

@code {

    [Parameter]
    public int LectureID { get; set; }

    public LectureDTO LectureDto { get; set; }

    private EditContext context { get; set; }

    private TestBaseDTO TestOfLecture { get; set; }

    private int TestId { get; set; }

    private string TestTopic { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        if (LectureID != 0)
        {
            var existingLecture = await LectureService.GetLectureById(LectureID);


            PrepareEditOrAddOfLecture(existingLecture);
        }
        else
        {
            PrepareEditOrAddOfLecture(new LectureDTO());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(LectureDto);
        VideoComponent.OnEditing = true;
    }



    private void PrepareEditOrAddOfLecture(LectureDTO lectureDto)
    {
        if (lectureDto.Topic == null) lectureDto.Topic = "lecture Topic";

        if (lectureDto.Author == null) lectureDto.Author = new UserDTO() { FirstName = "Ezzy", LastName = "Bert", Name = "user4", Role = Role.Teacher, UserId = 4 }; //ToDo
                                                                                                                                                                     //if(test.TestContent == null) test.TestContent = new List<TestContentDTO>();
        if (lectureDto.Videos == null) lectureDto.Videos = new List<VideoContentDTO>();
        if (lectureDto.Content == null) lectureDto.Content = new List<PictureContentDTO>();
        if (lectureDto.Test == null) lectureDto.Test = new TestDTO(); // TODO nicht sicher?

        this.LectureDto = lectureDto;
    }


    private void OnSubmit(EditContext context)
    {

    }


    protected async void GetTestById()
    {
        TestOfLecture = await LectureService.GetTestById(TopicToId(TestTopic));

    }
    private async void SaveContentToBackend(LectureDTO LectureDto)
    {

        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await LectureService.AddOrUpdateLecture(LectureDto);
            if (answer != null)
            {
                this.LectureDto.LectureId = answer.LectureId;
                NavigationManager.NavigateTo("/lectureoverview");
            }
            else
                Console.WriteLine("answer = FALSE");
        }
        else Console.WriteLine("isValid = FALSE");
    }

    private int TopicToId(string topic)
    {
        int id = Int32.Parse(topic);
        return id;



    }
    private async void AddTestToLecture()
    {

        int testId = TopicToId(TestTopic);
        var Test = await LectureService.GetTestById(testId);
        this.LectureDto.Test = new TestBaseDTO() { Topic = Test.Topic, Author = Test.Author, Description = Test.Description, TestID = Test.TestID };

        // GetTestById();
        //this.LectureDto.Test =TestOfLecture;

        //this.LectureDto.Test =  LectureService.GetTestById(TopicToId(TestTopic)) ; //this.LectureDto.Test.Topic.TopicToId()
    }

    private void AddVideoContent()
    {
        LectureDto.Videos.Add(new VideoContentDTO() { Path = "https://www.youtube.com/embed/" });
    }

    private void DeleteVideoContent(VideoContentDTO videoContentDto)
    {
        LectureDto.Videos.Remove(videoContentDto);
    }

    private void AddPictureContent()
    {
        LectureDto.Content.Add(new PictureContentDTO());
    }

    private void DeletePictureContent(PictureContentDTO pictureContentDto)
    {
        LectureDto.Content.Remove(pictureContentDto);
    }

    private void AddTest()
    {
        LectureDto.Test = new TestDTO(); //TODO nicht sicher ?
    }
}

