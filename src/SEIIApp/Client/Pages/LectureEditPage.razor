@page "/lectureedit/{LectureID:int}"

@inject Services.LectureBackendAccessService LectureService
@inject NavigationManager NavigationManager

<h3>LectureEditPage</h3>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-3 text-center">
            <h3 class="text-center">Content Editor</h3>

            @if (LectureDto != null)
            {

        <EditForm EditContext="@context" OnSubmit="OnSubmit">

            <label>Lecture Name:</label>
            <InputText @bind-Value="LectureDto.Topic" />


            @foreach (var video in LectureDto.Videos)
            {
                <div class="card">
                    <div class="card-body">

                        <VideoComponent VideoContentDTO="video"></VideoComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeleteVideoContent(video)">Remove Video</button>
                    </div>
                </div>
            }
            <button class="btn btn-light" @onclick="AddVideoContent">Add Video</button>

            <hr />
            @foreach (var picture in LectureDto.Content)
            {
                <div class="card">
                    <div class="card-body">
                        <PictureComponent PictureContentDto="picture"></PictureComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeletePictureContent(picture)">Remove Picture</button>
                    </div>
                </div>

            }
            <button class="btn btn-light btn-sm my-3" @onclick="AddPictureContent">Add Picture</button><br />

            <label>Lecture Text:</label>
            <InputText @bind-Value="LectureDto.Text" />

           

            <button class="btn btn-light" @onclick="() => SaveContentToBackend(this.LectureDto)">Save Lecture</button>
        </EditForm>

            }
            else
            {
                <h5>Lectures in loading (or not found) ...</h5>
            }

        </div>
    </div>
</div>

@code {

    [Parameter]
    public int LectureID { get; set; }

    public LectureDTO LectureDto { get; set; }

    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (LectureID != 0)
        {
            var existingLecture = await LectureService.GetLectureById(LectureID);
            PrepareEditOrAddOfLecture(existingLecture);
        }
        else
        {
            PrepareEditOrAddOfLecture(new LectureDTO());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(LectureDto);
    }

    private void PrepareEditOrAddOfLecture(LectureDTO lectureDto)
    {
        if (lectureDto.Content == null) lectureDto.Content = new List<PictureContentDTO>();
        if (lectureDto.Author == null) lectureDto.Author = new UserDTO() { FirstName = "Ezzy", LastName = "Bert", Name = "user4", Role = Role.Teacher, UserId = 4 }; //ToDo
                                                                                                                                                                      //if(test.TestContent == null) test.TestContent = new List<TestContentDTO>();
        if (lectureDto.Videos == null) lectureDto.Videos = new List<VideoContentDTO>();
        if (lectureDto.Content == null) lectureDto.Content = new List<PictureContentDTO>();
       // if (lectureDto.Test == null) lectureDto.Test = new TestDTO(); // TODO nicht sicher?

        this.LectureDto = lectureDto;
    }


    private void OnSubmit(EditContext context)
    {

    }

    private async void SaveContentToBackend(LectureDTO LectureDto)
    {

        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await LectureService.AddOrUpdateLecture(LectureDto);
            if (answer != null)
            {
                this.LectureDto.LectureId = answer.LectureId;
                NavigationManager.NavigateTo("/lectureoverview");
            }
            else
                Console.WriteLine("answer = FALSE");
        }
        else Console.WriteLine("isValid = FALSE");
    }

    private void AddVideoContent()
    {
        LectureDto.Videos.Add(new VideoContentDTO() { Path = "https://www.youtube.com/embed/" });
    }

    private void DeleteVideoContent(VideoContentDTO videoContentDto)
    {
        LectureDto.Videos.Remove(videoContentDto);
    }

    private void AddPictureContent()
    {
        LectureDto.Content.Add(new PictureContentDTO());
    }

    private void DeletePictureContent(PictureContentDTO pictureContentDto)
    {
        LectureDto.Content.Remove(pictureContentDto);
    }

    private void AddTest()
    {
        LectureDto.Test = new TestDTO(); //TODO nicht sicher ?
    }
}

