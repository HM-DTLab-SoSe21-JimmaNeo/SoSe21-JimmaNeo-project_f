@page "/lectureedit/{LectureID:int}"

@inject UserLoggedInService UserService

@inject Services.LectureBackendAccessService LectureService
@inject NavigationManager NavigationManager
@inject Services.TestsDefinitionBackendAccessService TestService
@inject EditService EditService


<div class="container">
    <div class="row justify-content-center">
        <div class="col-7 text-center">
            <h2 class="text-center">Lecture Editor</h2>
            <hr class=" divider" />

            @if (LectureDto != null)
            {
                if (UserService.User != null && UserService.User.Role == Role.Teacher)
                {
                    EditService.OnEditing = true;
                    <EditForm EditContext="@context" OnSubmit="OnSubmit">
                        <ObjectGraphDataAnnotationsValidator />
                        <div class="input-group">

                            <input type="text" style='width:100%' required @bind-value="LectureDto.Topic"
                        @bind-value:event="oninput">
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label class="hoverlabel">Topic of the test:</label>
                        </div>
                        <h5>
                            <br /><b>Lecture Text</b>
                        </h5>
                        <div class="form-floating">
                            <textarea class="form-control" id="inputMessage" type="text" placeholder="Enter Text here..."
                        style="height: 15rem" @bind="LectureDto.Text"></textarea>
                        </div>

                        <h5>
                            <br /><b>Upload Youtube Videos</b>
                        </h5>
                        @foreach (var video in LectureDto.Videos)
                        {
                            <div class="card">
                                <div class="card-body shadow">

                                    <VideoComponent VideoContentDTO="video"></VideoComponent>
                                    <button class="btn btn-light btn-sm my-3 shadow"
                            @onclick="() => DeleteVideoContent(video)">Remove Video</button>
                                </div>
                            </div><br />
                        }
                        <button class="btn btn-light shadow" @onclick="AddVideoContent">Add Video</button>

                        <hr />


                        @foreach (var picture in LectureDto.Content)
                        {
                            <div class="card">
                                <div class="card-body shadow">
                                    <PictureComponent PictureContentDTO="picture"></PictureComponent>
                                    <button class="btn btn-light btn-sm my-3 shadow"
                            @onclick="() => DeletePictureContent(picture)">Remove Picture</button>
                                </div>
                            </div><br />

                        }
                        <br /><button class="btn btn-light shadow" @onclick="AddPictureContent">Add Picture</button><br />
                        <hr />




                        <b>Add Test to Lecture by Test ID</b><br />
                        <div class="input-group">
                            <input type="text" style='width:100%' required @bind-value="@TestId" @bind-value:event="oninput">
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label class="hoverlabel">ID of the test:</label>
                        </div>

                        <hr />
                        <ValidationSummary />
                        <br />
                        <button class="btn btn-outline-success shadow" @onclick="() => SaveContentToBackend(this.LectureDto)">
                            Save
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                        class="bi bi-check-lg" viewBox="0 0 16 16">
                                <path
                            d="M13.485 1.431a1.473 1.473 0 0 1 2.104 2.062l-7.84 9.801a1.473 1.473 0 0 1-2.12.04L.431 8.138a1.473 1.473 0 0 1 2.084-2.083l4.111 4.112 6.82-8.69a.486.486 0 0 1 .04-.045z" />
                            </svg>
                        </button>

                        <button class="btn btn-outline-danger shadow"
                    @onclick="() =>  NavigationManager.NavigateTo(LectureOverviewURL)">
                            Cancel
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                        class="bi bi-x-lg" viewBox="0 0 16 16">
                                <path
                            d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414
                                              1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
                            </svg>
                        </button><br />


                    </EditForm>
                }
                else
                {
                    <label>No access to this page!</label>
                }

            }
            else
            {
                <h5>Lectures in loading (or not found) ...</h5>
            }

        </div>
    </div>
</div>

@code {

    [Parameter]
    public int LectureID { get; set; }

    public LectureDTO LectureDto { get; set; }

    private EditContext context { get; set; }

    private TestBaseDTO TestOfLecture { get; set; }
    private string LectureOverviewURL = "/lectureoverview";

    private string TestId { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        if (LectureID != 0)
        {
            var existingLecture = await LectureService.GetLectureById(LectureID);


            PrepareEditOrAddOfLecture(existingLecture);
        }
        else
        {
            PrepareEditOrAddOfLecture(new LectureDTO());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(LectureDto);
        EditService.OnEditing = true;

    }



    private void PrepareEditOrAddOfLecture(LectureDTO lectureDto)
    {
        if (lectureDto.Topic == null) lectureDto.Topic = "lecture Topic";

        if (lectureDto.Author == null) lectureDto.Author = UserService.User;

        if (lectureDto.Videos == null) lectureDto.Videos = new List<VideoContentDTO>();
        if (lectureDto.Content == null) lectureDto.Content = new List<PictureContentDTO>();
        if (lectureDto.Test == null) lectureDto.Test = null;

        this.LectureDto = lectureDto;
    }


    private void OnSubmit(EditContext context)
    {

    }

    /// <summary>
    /// Overwrites TestOfLecture with a TestBasoDto with given ID
    /// </summary>

    protected async void GetTestById()
    {
        TestOfLecture = await LectureService.GetTestById(StringToId(TestId));

    }
    private async void SaveContentToBackend(LectureDTO LectureDto)
    {

        var isValid = context.Validate();
        if (isValid)
        {
            await AddTestToLecture();
            var answer = await LectureService.AddOrUpdateLecture(LectureDto);
            if (answer != null)
            {
                this.LectureDto.LectureId = answer.LectureId;
                NavigationManager.NavigateTo("/lectureoverview");
            }
            else
                Console.WriteLine("answer = FALSE");
        }
        else Console.WriteLine("isValid = FALSE");
    }

    private int StringToId(string inputId)
    {
        int id = Int32.Parse(inputId);
        return id;



    }
    
   /// <summary>
   /// Adds a Test with TestId to current Lecture
   /// </summary>
    private async Task AddTestToLecture()
    {

        if (TestId != null && !TestId.Equals(""))
        {
            int testId = StringToId(TestId);
            this.LectureDto.Test = await LectureService.GetTestById(testId);
        }

    }

    private void AddVideoContent()
    {
        LectureDto.Videos.Add(new VideoContentDTO());
    }

    private void DeleteVideoContent(VideoContentDTO videoContentDto)
    {
        LectureDto.Videos.Remove(videoContentDto);
    }

    private void AddPictureContent()
    {
        LectureDto.Content.Add(new PictureContentDTO());
    }

    private void DeletePictureContent(PictureContentDTO pictureContentDto)
    {
        LectureDto.Content.Remove(pictureContentDto);
    }

   
}
