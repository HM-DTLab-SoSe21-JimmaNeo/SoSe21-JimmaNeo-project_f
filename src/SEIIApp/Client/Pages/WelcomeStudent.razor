@page "/welcomestudent"
@page "/welcomestudent/{UserId:int}"
@inject NavigationManager NavigationManager
@inject UserLoggedInService MyUserService
@inject ToDoBackendAccessService ToDoService
@inject CompletedTestBackendAccessService CompletedTestService
@inject NewsBackendAccessService NewsService
@inject DataStudentItemService DataItem
@using SEIIApp.Shared
@using Radzen




<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway">

@{

    if (MyUserService.User != null && MyUserService.User.Role == Role.Student)
    {

        <!-- w3-content defines a container for fixed size centered content,
        and is wrapped around the whole page content, except for the footer in this example -->
        <div class="w3-content" style="max-width:1400px">

            <!-- Header -->
            <header class="w3-container w3-center w3-padding-32">
                <h1 style="color: black"><b>Student Area</b></h1>
                <hr class="divider">
                <h3>Welcome Student @MyUserService.User.FirstName @MyUserService.User.LastName</h3>


            </header>

            <!-- Grid -->
            <div class="w3-row">
                <!-- Left Side Cards -->
                <div class="w3-col l8 s12">
                    <!-- Statistic Card -->
                    <div class="w3-card-4 w3-margin w3-white">
                        <div class="w3-container">
                            <h3><img src="/Images/WelcomeStudent/Icons/StatisticIcon2.svg" alt="Image" class="w3-center w3-margin-right" style="width:50px"><b>Test Statistics</b></h3>
                            @if (maxPointList != null)
                            {
                                <RadzenChart>
                                    <RadzenColumnSeries Data="@dataItemTestList" CategoryProperty="TestName" Title="Reached" LineType="LineType.Dashed" ValueProperty="ReachedPoints" />
                                    <RadzenValueAxis Min="0" />
                                    <RadzenColumnSeries Data="@maxPointList" CategoryProperty="TestName" Title="Max" ValueProperty="ReachedPoints" />
                                    <RadzenColumnOptions Radius="5" />
                                </RadzenChart>
                            }
                            else
                            {
                                <h4><img src="/Images/WelcomeStudent/Icons/NoTests.svg" alt="Image" class="w3-center w3-margin-left" style="width:40px">You have not absolved any tests yet.</h4>
                            }
                        </div>
                    </div>
                    <!-- END Statistic Card -->
                    <hr>

                    <!-- ToDo Card -->
                    <div class="w3-card-4 w3-margin w3-white">
                        <div class="w3-container">
                            <h3><img src="/Images/WelcomeStudent/Icons/ToDoIcon.svg" alt="Image" class="w3-center w3-margin-right" style="width:50px"><b>Today's To-Dos </b></h3>
                            @if (count != 0)
                            {
                                <h5>Let´s go! You have @count Task open!</h5>
                            }
                            else
                            {

                                <h5>Well done! @count Task open! <img src="/Images/WelcomeStudent/Icons/Success.svg" alt="Image" class="w3-center w3-margin-right" style="width:40px"></h5>
                            }
                        </div>
                        <div class="w3-container">
                            <ul>
                                @if (toDo != null)
                                {
                                    @foreach (var todo in toDo)
                                    {

                                        <div class="input-group mb-3">
                                            <div class="input-group-text">
                                                <input type="checkbox" @bind="todo.IsDone" @onclick="() => UpdateToDo(todo, !todo.IsDone)" aria-label="Checkbox for following text input">
                                            </div>
                                            <input type="text" class="form-control" aria-label="Text input with checkbox" @bind="todo.Task" disabled>
                                        </div>
                                    }
                                }
                            </ul>
                            <br />
                            <div class="input-group">
                                <input class="input-group-mod" type="text" style='width:100%' required @bind="newTodo">
                                <span class="highlight"></span>
                                <span class="bar"></span>
                                <label class="hoverlabel">Something ToDo</label>
                                <br />
                            </div>

                            <br />
                            <button class="btn btn-primary" @onclick="AddTodo">Add todo</button>
                            <button class="btn btn-danger" @onclick="DeleteToDo">Delete Todo</button>
                            <br />
                            <br />

                        </div>
                    </div>
                    <!-- END ToDo Card -->
                </div>
                <!-- END Left Side Cards -->
                <!-- Right Side Cards -->
                <div class="w3-col l4">
                    <!-- Statistic Card -->
                    <div class="w3-card w3-margin w3-margin-top">
                        <div class="w3-container w3-padding">
                            <h3><img src="/Images/WelcomeStudent/Icons/StatisticIcon1.svg" alt="Image" class="w3-center w3-margin-right" style="width:50px"><b>Progress</b></h3>

                            @if (nonDuplicateTestList != null)
                            {
                                @if (DataItem.maxReachedPointsfromTests != 0)
                                {
                                    <RadzenArcGauge Style="width: 100%; height: 250px;">
                                        <RadzenArcGaugeScale Step="10" Min="0" Max="100" MinorStep="2" Radius="1.0" TickPosition=@tickPosition Y="0.9" Margin="0">
                                            <RadzenArcGaugeScaleValue Value=@DataItem.maxReachedPointsfromTests>
                                                <Template Context="pointer">
                                                    <h4>
                                                        @pointer.Value <sup>%</sup>
                                                    </h4>
                                                </Template>
                                            </RadzenArcGaugeScaleValue>
                                        </RadzenArcGaugeScale>
                                    </RadzenArcGauge>
                                    <br />
                                }
                            }
                            else
                            {
                                <h4><img src="/Images/WelcomeStudent/Icons/NoTests.svg" alt="Image" class="w3-center w3-margin-left" style="width:25px">You have not absolved any tests yet.</h4>
                                <br />
                            }
                        </div>
                    </div>
                    <!-- END Statisic Card -->
                    <hr>

                    <!-- Latest News Card -->
                    <div class="w3-card w3-margin">
                        <div class="w3-container w3-padding">
                            <h3><b><img src="/Images/WelcomeStudent/Icons/NewsIcon.svg" alt="Image" class="w3-center w3-margin-right" style="width:50px">Latest News</b></h3>
                        </div>
                        <ul class="w3-ul w3-hoverable w3-white">

                            @if (news != null)
                            {
                                @foreach (var news in news)
                                {
                                    <li class="w3-padding-16">
                                        <NavLink href="news">
                                            <span class="w3-large">@news.Topic</span><br>
                                        </NavLink>
                                        <span>@news.DateOfCreation</span>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                    <!-- END Latest News Card -->
                    <hr>
                    <!-- Feedback Bug Card -->
                    <div class="w3-card w3-margin">
                        <div class="flip-card">
                            <div class="flip-card-inner">
                                <div class="flip-card-front">
                                    <img src="/Images/WelcomeStudent/heart.jpg" style="width:100%">
                                </div><hr>
                                <div class="flip-card-back">
                                    <p>
                                        <br />
                                        <b>Feedback / Bug Reporting</b><br /><br />
                                        We want to hear what you have to say about this feature because ultimately we're building it <br />for you.
                                        <br /> <NavLink href="contact"><img src="/Images/WelcomeStudent/Icons/brief.svg" alt="Image" class="w3-center w3-margin-right" style="width:50px"></NavLink>

                                    </p>
                                    <br />

                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- END Feedback Bug Card -->
                    <hr>
                </div>
                <!-- END Right Side Cards -->
            </div>
            <!-- END Grid -->
        </div>
        <!-- END w3 content -->


    }
    else
    {
        <p>You are not allowed to see this!</p>
        <a href="login" class="btn btn-outline-primary" role="button">Let´s login!</a>
    }
}


@code {

    public int[] Roles { get; set; }

    [Parameter]
    public int UserID { get; set; }

    private List<NewsDTO> news { get; set; }

    private List<ToDoDTO> toDo { get; set; }
    private ToDoDTO tempToDo { get; set; }

    private string newTodo { get; set; }
    private int count { get; set; }

    private CompletedTestDTO[] completedTestList { get; set; }
    private CompletedTestDTO[] nonDuplicateTestList { get; set; }

    private DataStudentItemService[] dataItemTestList { get; set; }
    private DataStudentItemService[] maxPointList { get; set; }

    GaugeTickPosition tickPosition = GaugeTickPosition.Outside;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (MyUserService.User != null)
        {
            completedTestList = await CompletedTestService.GetCompletedTestsWithUserId(MyUserService.User.UserId);

            nonDuplicateTestList = GetCompletedTestFromUser();
            CreateDataItems();
            toDo = await ToDoService.GetToDosByAuthor(MyUserService.User.UserId);
            tempToDo = new ToDoDTO();
            GetCounter();
            CountReachedPointsFromCompletedTests();
            news = await GetLastNews();
        }
        StateHasChanged();
    }

    /// <summary>
    /// Generates a Test List with all absolved Test from a specific user without test duplicates.
    /// </summary>
    private CompletedTestDTO[] GetCompletedTestFromUser()
    {
        if (completedTestList != null)
        {
            var originTestList = new List<CompletedTestDTO>(completedTestList);
            var nonDuplicateList = new List<CompletedTestDTO>();
            bool alreadyExist = false;

            for (int i = 0; i < originTestList.Count; i++)
            {
                if (nonDuplicateList.Count != 0)
                {
                    for (int j = 0; j < nonDuplicateList.Count; j++)
                    {
                        if (originTestList[i].SolvedTest.TestID == nonDuplicateList[j].SolvedTest.TestID)
                        {
                            if (nonDuplicateList[j].ReachedPoints < originTestList[i].ReachedPoints)
                            {
                                nonDuplicateList[j] = originTestList[i];
                            }

                            alreadyExist = true;
                            break;
                        }
                        alreadyExist = false;
                    }
                }
                if (!alreadyExist)
                {
                    nonDuplicateList.Add(originTestList[i]);
                }
            }
            return nonDuplicateList.ToArray();
        }
        else
        {
            return null;
        }

    }


    /// <summary>
    /// Generates DataItems for creating specifics charts.
    /// </summary>
    private void CreateDataItems()
    {
        if (nonDuplicateTestList != null)
        {
            dataItemTestList = new DataStudentItemService[nonDuplicateTestList.Length];
            maxPointList = new DataStudentItemService[nonDuplicateTestList.Length];
            int count = 0;

            foreach (var test in nonDuplicateTestList)
            {
                dataItemTestList[count] = new DataStudentItemService() { TestName = test.SolvedTest.Topic, ReachedPoints = test.ReachedPoints };
                maxPointList[count] = new DataStudentItemService() { TestName = test.SolvedTest.Topic, ReachedPoints = test.MaxPoints };
                count++;
            }
        }
    }

    /// <summary>
    /// Counts the total Points from all absolved and completed tests of active user.
    /// </summary>
    private void CountMaxPointsFromCompletedTests()
    {
        DataItem.maxPointsfromTests = 0;

        if (nonDuplicateTestList != null && maxPointList != null)
        {
            for (int i = 0; i < maxPointList.Length; i++)
            {
                if (maxPointList[i] != null)
                {
                    DataItem.maxPointsfromTests += maxPointList[i].ReachedPoints;
                }
            }


        }
    }

    /// <summary>
    /// Counts reached points from all absolved and completed tests of active user.
    /// </summary>
    private void CountReachedPointsFromCompletedTests()
    {
        DataItem.maxReachedPointsfromTests = 0;

        if (nonDuplicateTestList != null && dataItemTestList != null)
        {

            for (int i = 0; i < dataItemTestList.Length; i++)
            {
                if (dataItemTestList[i] != null)
                {
                    DataItem.maxReachedPointsfromTests += dataItemTestList[i].ReachedPoints;
                }
            }

            CountMaxPointsFromCompletedTests();
            DataItem.maxReachedPointsfromTests /= DataItem.maxPointsfromTests;
            DataItem.maxReachedPointsfromTests = System.Math.Round(DataItem.maxReachedPointsfromTests * 100, 0);
        }
    }

    /// <summary>
    /// Generates a NewsList with the last three news.
    /// </summary>
    private async Task<List<NewsDTO>> GetLastNews()
    {
        news = await NewsService.GetNews();
        List<NewsDTO> latestNews = new List<NewsDTO>();
        latestNews.Add(news[news.Count - 1]);
        latestNews.Add(news[news.Count - 2]);
        latestNews.Add(news[news.Count - 3]);
        return latestNews;
    }


    /// <summary>
    /// Generates a List with specifics ToDos of the active user.
    /// </summary>
    private async void GetToDos()
    {
        toDo = await ToDoService.GetToDosByAuthor(MyUserService.User.UserId);
    }

    /// <summary>
    /// Adds new user tods.
    /// </summary>
    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            tempToDo.Task = newTodo;
            tempToDo.ToDoID = 0;
            tempToDo.Author = MyUserService.User;
            tempToDo.IsDone = false;
            await ToDoService.AddOrUpdateToDo(tempToDo);
            toDo.Add(tempToDo);
            GetToDos();
            GetCounter();
            newTodo = string.Empty;
            

        }

    }

    /// <summary>
    /// Updates the toDo List, when a check box is selected.
    /// </summary>
    private async Task UpdateToDo(ToDoDTO todo, bool check)
    {
        todo.IsDone = check;
        await ToDoService.AddOrUpdateToDo(todo);
        GetCounter();
        StateHasChanged();
    }

    /// <summary>
    /// Counts how many toDo tasks are still open.
    /// </summary>
    private void GetCounter()
    {
        if (toDo != null)
        {
            count = toDo.Count(todo => !todo.IsDone);
        }
        else
        {
            count = 0;
        }
    }


    /// <summary>
    /// Deletes todos from toDo List.
    /// </summary>
    private async Task DeleteToDo()
    {
        List<ToDoDTO> tempToDo = new List<ToDoDTO>();
        tempToDo.AddRange(toDo.Where(t => t.IsDone));

        foreach (var todo in tempToDo)
        {
            bool successfull = await ToDoService.DeleteToDo(todo.ToDoID);

            if (successfull)
            {
                toDo = await ToDoService.GetToDosByAuthor(MyUserService.User.UserId);
            }
        }
        GetCounter();
        StateHasChanged();
    }

}

