@page "/lectureoverview"
@inject Services.LectureBackendAccessService LectureService
@inject NavigationManager NavigationManager
@inject UserServicee UserService

<div class="container">

    <h2 class="text-center">Your Lecture</h2>
    <hr class="divider">
    <div class="col text-center">

        <div class="px-5">
            <EditForm Model="@searchValue">
                <div class="searchcostum input-group pt-2">


                    @if (isFiltered == false)
                    {
                        <div class="px-auto">
                            <InputText type="search" class="form-control rounded" placeholder="Search by Lecturename"
                                       aria-label="Name of the Content" aria-describedby="search-addon" @bind-Value="@searchValue" />


                        </div>
                        <button class="btn btn-outline-primary btn-sm" @onclick="SearchContent">Search</button>
                        <hr />

                    }
                    else
                    {
                        <div class="text-center pb-2">
                            <button class="btn btn-outline-primary" @onclick="ResetSearchContent">Return</button>
                        </div>
                        <hr />
                    }

                </div>
            </EditForm>
            @if (UserService.User != null && UserService.User.Role == Role.Teacher)
            {
                VideoComponent.OnEditing = true;
                PictureComponent.OnEditing = true;
                <div class="text-center py-2">
                    <button class="btn btn-outline-success btn-sm" @onclick="AddLecture">Add Test</button>
                </div>
            }

        </div>
    </div>

  



    @if (Lectures != null)
    {

        if (UserService.User != null && UserService.User.Role == Role.Teacher)
        { 
            <ul class="list-group list-group-flush">


                @foreach (var content in Lectures)
                {
                    <li class="text-center list-group-item">
                        
                        <div class="card">
                            <div class="card-body">
                                <b>
                                    LectureID:
                                </b>
                                @(content.LectureId)
                                <b>
                                    Date:
                                </b>
                                @(content.DateOfCreation.ToShortDateString())
                                <b>
                                    Author:
                                </b>
                                @(content.Author.Name)
                                @(content.Author.LastName)
                                <b>
                                    Topic: 
                                </b>
                                @(content.Topic)
                                <br />
                                <button class="btn btn-outline-dark btn-sm" @onclick="() => EditLecture((LectureDTO)content)">Edit</button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteLecture(content)">Delete</button>
                                <button class="btn btn-outline-dark btn-sm" @onclick="() => StartLecture(content.LectureId)">Start</button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
        else if (UserService.User != null && UserService.User.Role == Role.Student)
        {
<ul class="list-group list-group-flush">

    @foreach (var content in Lectures)
    {
        <li class="text-center list-group-item">
            <div class="card">
                <div class="card-body">
                    <b>
                        LectureID:
                    </b>
                    @(content.LectureId)
                    <b>
                        Date:
                    </b>
                    @(content.DateOfCreation.ToShortDateString())
                    <b>
                        Author:
                    </b>
                    @(content.Author.Name)
                    @(content.Author.LastName)
                    <b>
                        Topic:
                    </b>

                    @(content.Topic)
                    <br />
                    <br />
                    <button class="btn btn-outline-success btn-sm" @onclick="() => StartLecture(content.LectureId)">Start</button>

                </div>
            </div>
        </li>
    }
    }
</ul>

        }
        else
        {
            <label>Please login to use this page.</label>
        }

    }
    else
    {
        <h5 class="text-center">Loading ...  or no content found.</h5>
    }
</div>

@code {
    public string searchValue = "";

    public bool isFiltered { get; set; }

    public List<LectureDTO> Lectures { get; set; }

    private List<LectureDTO> copyOfLectures { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Lectures = await LectureService.GetLectureOverview();
    }

    private void EditLecture(LectureDTO lecture)
    {
        NavigationManager.NavigateTo("/lectureedit/" + lecture.LectureId);
    }

    private void AddLecture()
    {
        NavigationManager.NavigateTo("/lectureedit/0");
    }

    private async Task DeleteLecture(LectureDTO lecture)
    {
        Lectures.Remove(lecture);

         if (copyOfLectures != null)
         {
             copyOfLectures.Remove(lecture);
         }

        await LectureService.DeleteLecture(lecture.LectureId);

    }

    private void SearchContent()
    {
        if (Lectures != null && searchValue != null)
        {
            copyOfLectures = new List<LectureDTO>(Lectures);
            isFiltered = true;
            Lectures.Clear();
            Lectures.AddRange(copyOfLectures.Where(t => t.Topic.ToLower().StartsWith(searchValue.ToLower())));
        }
    }

    private void ResetSearchContent()
    {
        isFiltered = false;
        Lectures.Clear();
        Lectures.AddRange(copyOfLectures);
    }


    private void StartLecture(int contentId)
    {
        NavigationManager.NavigateTo("/runlecture/" + contentId);
    }


}

