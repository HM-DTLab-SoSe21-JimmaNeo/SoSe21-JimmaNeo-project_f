@page "/lectureoverview"
@inject Services.LectureBackendAccessService LectureService
@inject NavigationManager NavigationManager
@inject UserLoggedInService UserService

<div class="container">

    <h2 class="text-center">Your Lectures</h2>
    <hr class="divider">
    <div class="col text-center">

        <div class="px-5">
            <EditForm Model="@searchValue">
                <div class="searchcostum input-group pt-2">

                    @if (isFiltered == false)
                    {
                        <div class="px-auto shadow">
                            <InputText type="search" class="form-control rounded" placeholder="Search by Topic"
                            aria-label="Name of the Content" aria-describedby="search-addon"
                            @bind-Value="@searchValue" />
                        </div>
                        <button class="btn btn-outline-primary btn-sm shadow" @onclick="SearchContent">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007
                                      1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                            </svg>
                        </button>
                        <hr />
                    }
                    else
                    {
                        <div class="text-center pb-2">
                            <button class="btn btn-outline-primary shadow" @onclick="ResetSearchContent">Return</button>
                        </div>
                        <hr />
                    }
                </div>
            </EditForm>
            @if (UserService.User != null && UserService.User.Role == Role.Teacher)
            {
                <div class="text-center py-2">
                    <button class="btn btn-outline-dark btn-sm shadow" @onclick="AddLecture">+ Add Lecture</button>
                </div>
            }
        </div>
    </div>





    @if (Lectures != null)
    {
        if (UserService.User != null && UserService.User.Role == Role.Teacher)
        {
            <ul class="list-group list-group-flush">

                @foreach (var content in Lectures)
                {
                    <li class="text-center list-group-item">
                        <div class="card shadow">
                            <div class="card-body">
                                <b>
                                    LectureID:
                                </b>
                                @(content.LectureId)
                                <b>
                                    Date:
                                </b>
                                @(content.DateOfCreation.ToShortDateString())
                                <b>
                                    Author:
                                </b>
                                @(content.Author.FirstName)
                                @(content.Author.LastName)
                                <b>
                                    Topic:
                                </b>
                                @(content.Topic)
                                <br />
                                <button class="btn btn-outline-dark btn-sm" @onclick="() => EditLecture((LectureDTO)content)">
                                    Edit
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-pencil-square" viewBox="0 0 16 16">
                                        <path
                                d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                        <path fill-rule="evenodd"
                                d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                    </svg>
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => ModalShow(content)">
                                    Delete
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-x-lg" viewBox="0 0 16 16">
                                        <path
                                d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414
                                              1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
                                    </svg>
                                </button>
                                <button class="btn btn-outline-success btn-sm" @onclick="() => StartLecture(content.LectureId)">
                                    Start
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-play-fill" viewBox="0 0 16 16">
                                        <path
                                d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
            @if (showModal)
            {
                <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
                    <div class="modal-dialog shadow">
                        <div class="modal-content">

                            <!-- Modal Header -->
                <div class="modal-header">
                                <h4 class="modal-title">Confirm delete</h4>
                                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                            </div>

                            <!-- Modal body -->
                <div class="modal-body">
                                <p>Are you sure you want to delete @currentLecture.Topic?</p>
                            </div>

                            <!-- Modal footer -->
                <div class="modal-footer">
                                <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                                <button type="button" class="btn btn-danger"
                        @onclick="() => DeleteLecture(currentLecture)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else if (UserService.User != null && UserService.User.Role == Role.Student)
        {
            <ul class="list-group list-group-flush">

                @foreach (var content in Lectures)
                {
                    <li class="text-center list-group-item">
                        <div class="card shadow">
                            <div class="card-body">
                                <b>
                                    LectureID:
                                </b>
                                @(content.LectureId)
                                <b>
                                    Date:
                                </b>
                                @(content.DateOfCreation.ToShortDateString())
                                <b>
                                    Author:
                                </b>
                                @(content.Author.FirstName)
                                @(content.Author.LastName)
                                <b>
                                    Topic:
                                </b>

                                @(content.Topic)
                                <br />
                                <button class="btn btn-outline-success btn-sm" @onclick="() => StartLecture(content.LectureId)">
                                    Start
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                            class="bi bi-play-fill" viewBox="0 0 16 16">
                                        <path
                                d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <label>Please login to use this page.</label>
        }
    }
    else
    {
        <h5 class="text-center">Loading ... or no content found.</h5>
    }
</div>

@code {
    public string searchValue = "";

    public bool isFiltered { get; set; }

    public List<LectureDTO> Lectures { get; set; }

    private List<LectureDTO> copyOfLectures { get; set; }

    private LectureDTO currentLecture { get; set; }

    private bool showModal = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Lectures = await LectureService.GetLectureOverview();
    }

    private void EditLecture(LectureDTO lecture)
    {
        if (lecture.LectureId > 0)
            NavigationManager.NavigateTo("/lectureedit/" + lecture.LectureId);
        else AddLecture();
    }

    private void AddLecture()
    {
        NavigationManager.NavigateTo("/lectureedit/0");
    }

    private async Task DeleteLecture(LectureDTO lecture)
    {
        if (Lectures != null)
        {
            Lectures.Remove(lecture);

            if (copyOfLectures != null)
            {
                copyOfLectures.Remove(lecture);
            }

            await LectureService.DeleteLecture(lecture.LectureId);
            showModal = false;
            StateHasChanged();
            await Task.Delay(3000);
        }
    }

    private void SearchContent()
    {
        if (Lectures != null && searchValue != null)
        {
            copyOfLectures = new List<LectureDTO>(Lectures);
            isFiltered = true;
            Lectures.Clear();
            Lectures.AddRange(copyOfLectures.Where(t => t.Topic.ToLower().StartsWith(searchValue.ToLower())));
        }
    }

    private void ResetSearchContent()
    {
        isFiltered = false;
        Lectures.Clear();
        Lectures.AddRange(copyOfLectures);
    }

    private void StartLecture(int contentId)
    {
        if(contentId > 0)
        NavigationManager.NavigateTo("/runlecture/" + contentId);
    }

    void ModalShow(LectureDTO lecture)
    {

        showModal = true;
        currentLecture = lecture;

    }

    void ModalCancel() => showModal = false;
}
