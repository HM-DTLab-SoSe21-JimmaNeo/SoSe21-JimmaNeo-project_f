@page "/welcometeacher"
@page "/welcometeacher/{UserId:int}"

@inject NavigationManager NavigationManager
@inject UserServicee MyUserService
@inject Services.CompletedTestBackendAccessService CompletedTestService

@using SEIIApp.Shared;

@{
    @if (MyUserService.User != null && MyUserService.User.Role == Role.Teacher)
    {
        <h1>Welcome Teacher @MyUserService.User.Name!</h1>
        <br />

        @if (SortedTests != null && SortedTests.Count > 0)
        {
            
            <table class="tableaverage">
                <thead>
                    <tr>
                        <th valign=top width="200">TestId</th>
                        <th valign=top width="200">Topic</th>
                        <th valign=top width="200">Date</th>
                        <th valign=top width="200">Average points(%)</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var test in SortedTests)
                    {
                    <tr>
                        <td>@test.TestID</td>
                        <td>@test.Topic</td>
                        <td>@test.DateOfCreation</td>
                        <td>@(Math.Round(Results[SortedTests.IndexOf(test)], 2))</td>
                    </tr>
                    }                   
                </tbody>
            </table>



           
        } else
        {
            <p>Either you have not yet created a test or no test you created was solved</p>
        }
    }

    else
    {
        <p>You are not allowed to see this!</p>
    }

   

}

@code {
    public int[] Roles { get; set; }

    [Parameter]
    public int userID { get; set; }

    private CompletedTestDTO[] CompletedTests { get; set; }

    private List<TestBaseDTO> SortedTests { get; set; }

    private double[] Results { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var result = await CompletedTestService.GetCompletedTestsWithAuthotId(userID);

        if (result != null && result.Length > 0)
        {
            CompletedTests = result;
        }

        CalculateResults();
    }

    private void CalculateResults()
    {
        SortedTests = SortTests();
        Results = new double[SortedTests.Count];
        int index = 0;

        foreach(var test in SortedTests)
        {
            var solvedTests = CompletedTests.Where(solved => solved.SolvedTest.TestID == test.TestID);
            double reachedPoints = 0, maxPoints = 0;
            foreach (var solved in solvedTests)
            {
                reachedPoints += solved.ReachedPoints;
                maxPoints += solved.MaxPoints;
            }
            Results[index] = (reachedPoints / maxPoints) * 100;
            index++;
        }
    }

    private List<TestBaseDTO> SortTests()
    {
        List<TestBaseDTO> Tests = new();

        foreach (var test in CompletedTests)
        {
            if (!IsInList(Tests, test.SolvedTest))
            {
                Tests.Add(test.SolvedTest);
            }
        }
        return Tests;
    }

    private bool IsInList(List<TestBaseDTO> tests, TestBaseDTO test)
    {
        foreach (var inList in tests)
        {
            if (inList.TestID == test.TestID)
            {
                return true;
            }
        }
        return false;
    }


}
