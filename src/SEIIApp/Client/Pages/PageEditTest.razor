@page "/testedit/{TestID:int}"

@inject Services.TestsDefinitionBackendAccessService TestDefinitionService
@inject UserServicee UserService

@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center">
        <div class="col-7 text-center">
            <h2 class="text-center">Test Editor</h2>
            <hr class="divider">

            @if (TestDto != null)
            {

        <EditForm EditContext="@context" OnSubmit="OnSubmit">
            <ObjectGraphDataAnnotationsValidator />

            <div class="input-group">

                <input type="text" style='width:100%' required @bind-value="TestDto.Topic" @bind-value:event="oninput">
                <span class="highlight"></span>
                <span class="bar"></span>
                <label class="hoverlabel">Topic of the test:</label>
            </div>

            <div class="form-floating">
                <textarea class="form-control" id="inputMessage" type="text" placeholder="Enter description here..." style="height: 10rem" @bind="TestDto.Description"></textarea>
            </div>

            <h5>
                <br /><b>Upload Youtube Videos</b>

            </h5>
            @foreach (var video in TestDto.Videos)
            {<div class="card shadow">
                    <div class="card-body">
                        <VideoComponent VideoContentDTO="video"></VideoComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeleteVideoContent(video)">
                            Remove
                            Video
                        </button>
                    </div>
                </div>
                <br />
            }
            <br /><button class="btn btn-light" @onclick="AddVideoContent">Add Video</button><br />

            <hr />
            <h5>
                <br /><b>Add questions and answers</b>

            </h5>
            @foreach (var question in TestDto.Questions)
            {
                <div class="card shadow">
                    <div class="card-body">
                        <QuestionDefComponent QuestionDto="question"></QuestionDefComponent>
                        <button class="btn btn-light" @onclick="() => RemoveQuestion(question)">Remove Question</button>
                    </div>
                </div>
                <br />

            }
            <button class="btn btn-light" @onclick="AddQuestion">Add Question</button>

            <br />
            <hr />
            <h5>
                <b>
                    Add further information about this topic via Website-Link, Youtube-Video, Png-Picture to give you students the possibility to expand
                    their knowledge!
                </b>
            </h5><br />

            @foreach (var link in TestDto.FurtherLinks)
            {
                <div class="card shadow">
                    <div class="card-body">
                        <FurtherLinkComponent FurtherLinkDto="link"></FurtherLinkComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeleteFurtherLink(link)">
                            Remove
                            Link
                        </button>
                    </div>
                </div>
                <br />
            }


            <br /><button class="btn btn-light" @onclick="AddFurtherLink">Add Link</button><br />
            <hr />
            @if (TestDto.VideosFurtherInformation != null)
            {
                @foreach (var video in TestDto.VideosFurtherInformation)
                {<div class="card shadow">
                        <div class="card-body">
                            <VideoComponent VideoContentDTO="video"></VideoComponent>
                            <button class="btn btn-light btn-sm my-3" @onclick="() => DeleteVideosFurtherInformation(video)">
                                Remove
                                Video
                            </button>
                        </div>
                    </div>
                    <br />
                }

            }
            <br /><button class="btn btn-light" @onclick="AddVideosFurtherInformation">Add Video</button><br />
            <hr />
            @foreach (var content in TestDto.Content)
            {<div class="card shadow">
                    <div class="card-body">
                        <PictureComponent PictureContentDTO="content"></PictureComponent>
                        <button class="btn btn-light btn-sm my-3" @onclick="() => DeletePictureContent(content)">
                            Remove
                            Picture
                        </button>
                    </div>
                </div>
                <br />
            }
            <br /><button class="btn btn-light" @onclick="AddPictureContent">Add Picture</button><br />
            <hr />
            <button class="btn btn-light" @onclick="SaveContentToBackend">
                Save Complete
                Test
            </button>

            <ValidationSummary />
        </EditForm>

            }
            else
            {
                <h5>Quiz definition in loading (or not found) ...</h5>
            }

        </div>
    </div>
</div>

@code {

    [Parameter]
    public int TestID { get; set; }

    public TestDTO TestDto { get; set; }

    private EditContext context { get; set; }

    private bool isNotValid { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (TestID != 0)
        {
            var existingQuiz = await TestDefinitionService.GetTestById(TestID);
            PrepareEditOrAddOfTestDefinition(existingQuiz);
        }
        else
        {
            PrepareEditOrAddOfTestDefinition(new TestDTO());
        }
        await base.OnParametersSetAsync();
        context = new EditContext(TestDto);
        SEIIApp.Client.Components.VideoComponent.OnEditing = true;
        SEIIApp.Client.Components.PictureComponent.OnEditing = true;
        SEIIApp.Client.Components.FurtherLinkComponent.OnEditing = true;
    }

    private void PrepareEditOrAddOfTestDefinition(TestDTO test)
    {
        if (test.Questions == null) test.Questions = new List<QuestionDTO>();
        if (test.Author == null) test.Author = UserService.User;
        if (test.Videos == null) test.Videos = new List<VideoContentDTO>();
        if (test.VideosFurtherInformation == null) test.VideosFurtherInformation = new List<VideoContentDTO>();
        if (test.Content == null) test.Content = new List<PictureContentDTO>();
        if (test.FurtherLinks == null) test.FurtherLinks = new List<FurtherLinkDTO>();

        this.TestDto = test;
    }

    private void AddQuestion()
    {
        TestDto.Questions.Add(new QuestionDTO());
    }

    private void OnSubmit()
    {

    }

    private void RemoveQuestion(QuestionDTO question)
    {
        TestDto.Questions.Remove(question);
    }

    private async void SaveContentToBackend()
    {
        var isValid = context.Validate();
        if (isValid)
        {
            var answer = await TestDefinitionService.AddOrUpdateTest(TestDto);
            if (answer != null)
            {
                this.TestDto.TestID = answer.TestID; //refresh id (if created)
                NavigationManager.NavigateTo("/testoverview");
            }
            else
            {
                isNotValid = true;
            }
        }
    }

    private void AddVideoContent()
    {
        TestDto.Videos.Add(new VideoContentDTO());
    }

    private void DeleteVideoContent(VideoContentDTO videoContentDto)
    {
        TestDto.Videos.Remove(videoContentDto);
    }

    private void AddVideosFurtherInformation()
    {
        if (TestDto.VideosFurtherInformation == null) TestDto.VideosFurtherInformation = new List<VideoContentDTO>();
        TestDto.VideosFurtherInformation.Add(new VideoContentDTO());
    }

    private void DeleteVideosFurtherInformation(VideoContentDTO videoContentDto)
    {
        TestDto.VideosFurtherInformation.Remove(videoContentDto);
    }

    private void AddPictureContent()
    {
        TestDto.Content.Add(new PictureContentDTO());
    }

    private void DeletePictureContent(PictureContentDTO pictureContentDto)
    {
        TestDto.Content.Remove(pictureContentDto);
    }

    private void AddFurtherLink()
    {
        TestDto.FurtherLinks.Add(new FurtherLinkDTO());
    }

    private void DeleteFurtherLink(FurtherLinkDTO link)
    {
        TestDto.FurtherLinks.Remove(link);
    }

}
