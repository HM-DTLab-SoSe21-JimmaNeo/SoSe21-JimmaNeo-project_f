@page "/manageuser"
@inject Services.UserBackendAccessService UserService
@inject NavigationManager NavigationManager
@using SEIIApp.Shared;
@using static SEIIApp.Client.Pages.Login;


<h3>ManageUser</h3>


@{

    if (User != null && User.Role == Role.Admin)
    {
        <table border="1" frame="box" width="80%">
        <tr>
            <th>Name</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>Role</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        foreach (var user in Users)
        {
            <tr>
                <td>@user.Name</td>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Role</td>
                <td><button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button></td>
                <td><button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button></td>
             @*    <td><select name="role" id="role">
                <option value="undefined">Undefined</option>
                <option value="student">Student</option>
                <option value="teacher">Teacher</option>
                <option value="admin">Admin</option>
                </select></td> *@
            </tr>
            </table>


}
    
    }
    else
    {
        <p>You are not allowed to see this!</p>
    }
}


    @code {

        public UserDTO[] Users = new UserDTO[0];

        protected override async Task OnParametersSetAsync()
        {
            await base.OnParametersSetAsync();
            Users = await UserService.GetAllUsers();
        }

        private void EditUser(UserDTO user)
        {
            //NavigationManager.NavigateTo($"/edituser/{user.UserId}");
        }

        private async void DeleteUser(UserDTO user)
        {

            bool successfull = await UserService.DeleteUser(user.UserId);
            if (successfull)
            {
                Users = Users.Where(u => u != user).ToArray();
            }

        }

    }
